---
description: Never inc. App Architecture (Supabase + Firebase)
globs: *.dart
---
## Overview

This document outlines the current project structure and architectural patterns. Follow these guidelines to maintain consistency while applying Flutter best practices.

## Architecture Overview

- Feature-first architecture with Riverpod state management
- Hooks-based widget composition
- SharedPreferences and Sembast for local persistence
- Supabase for backend services
- Firebase for analytics and messaging
- Static analysis with pedantic_mono

## Project Structure

```
lib/
  core/
    ad_mob/           // AdMob implementations
    constants/        // App-wide constants
    extensions/       // Extension methods
    gen/             // Auto-generated code
    providers/       // Common Providers
      firebase_messaging/
      supabase/
    res/             // Resources (colors, styles, etc.)
    utils/           // Utility functions
    widgets/         // Common Widgets
  features/          // Feature modules
    feature_name/    // Individual feature directories
      providers/     // Feature-specific Providers
      widgets/       // Feature-specific Widgets
      {feature}_page.dart  // Main page
test/
  unit/
  widget/
```

## State Management Guidelines

1. Use Riverpod with @riverpod annotation
2. Let riverpod_generator determine the appropriate Notifier class
3. Use appropriate local storage:
   - SharedPreferences for simple settings and flags
   - Sembast for complex user data and content
4. Follow proper state immutability patterns
5. Use proper provider scoping
6. Ensure code passes static analysis:
   - Follow pedantic_mono lint rules
   - Fix all analysis warnings
   - Use proper null safety patterns
   - Add required documentation comments

## Widget Guidelines

1. Use HookConsumerWidget for stateful widgets
2. Implement proper error handling with adaptive_dialog
3. Use proper widget composition
4. Follow Material 3 design principles
5. Implement proper loading states
6. Follow navigation patterns:
   - Implement static show() method for page transitions
   - Use Navigator.push with CupertinoPageRoute for standard transitions
   - Use page_transition for custom transition effects when needed
   - Set proper route settings with routeName

## Provider Guidelines

1. Place providers in feature/providers directory
2. Use proper provider dependencies
3. Implement proper error handling
4. Follow proper caching strategies
5. Use proper provider scoping
6. Follow single responsibility principle:
   - One provider should manage one specific state
   - State mutations should be handled by a single source of truth
   - Keep business logic focused and cohesive

## Feature Organization

1. Organize by feature first
2. Keep features independent
3. Share common code through core
4. Follow consistent naming patterns
5. Implement proper routing
6. Follow DRY principle:
   - Extract common widgets to core/widgets
   - Share common providers through core/providers
   - Use extensions for repeated code patterns
   - Create utility functions for common operations

## Testing Guidelines

1. Write offline unit tests:
   - Use mockito for mocking dependencies
   - Minimize network and database dependencies
   - Focus on testing business logic in isolation
2. Implement widget tests for complex UI
3. Use proper mocking strategies
4. Follow proper test naming conventions

## Performance Guidelines

1. Implement proper image caching
2. Optimize list views for UGC:
   - Use ListView.builder for lazy loading
   - Implement pagination for large datasets
   - Cache list items appropriately
   - Handle loading and error states
   - Use proper scroll performance optimization
3. Follow proper state management patterns
4. Implement proper memory management
5. Use proper ad loading strategies

## Naming Guidelines

1. Follow consistent casing:
   - Directory names: snake_case
   - File names: snake_case
   - Class names: UpperCamelCase
   - Variable names: camelCase
   - Constant names: camelCase

2. Screen and Component naming:
   - Pages: NounPage (e.g., ArticlePage, ArticlesPage)
   - Components: NounComponentType (e.g., ArticleTile, ArticleCard)
   - Avoid generic Widget suffix (e.g., ArticleWidget)

3. Data class naming:
   - Basic: Noun (e.g., Article)
   - Modified: AdjectiveNoun or NounNoun (e.g., LatestArticle, PrivateArticle)

4. Data source layer naming:
   - API clients: NounClient (e.g., GitHubClient)
   - Repositories: NounRepository (e.g., ArticleRepository)
   - Data sources: NounDataSource (e.g., ArticleDataSource)

5. General principles:
   - Use nouns or adjectives for entities
   - Use verbs for actions
   - Consider pluralization in naming
   - Keep names clear and descriptive
